Q)Explain Big O notation and how it helps in analyzing algorithms .
A)Big O Notation is used to describe the performance or complexity of an algorithm in terms of time and space as the size of the input grows. It helps in analyzing and comparing algorithms based on their efficiency:-
1.Focus: It highlights how the runtime or memory usage increases with larger input sizes, providing an upper bound on performance.
2.Purpose: It abstracts away constants and lower-order terms to give a general idea of an algorithm's growth rate.
Example:
O(1): Constant time complexity – the algorithm's performance remains constant regardless of input size.
O(n): Linear time complexity – performance scales linearly with input size.
O(log n): Logarithmic time complexity – performance scales logarithmically with input size.




Q)Describe the best, average, and worst-case scenarios for search operations.
A)
1.Linear Search:
-Best-case: O(1) when the target is the first element
-Average and worst-case are :O(n), where n is the number of products.

2.Binary Search:
-Best-Case :O(1)  when the target is exactly at the midpoint.
-Average and worst-case :O(logn), assuming the array is sorted, as binary search divides the search interval in half each time.




Q)Compare the time complexity of linear and binary search algorithms.
A)1.Efficiency: Binary search is more efficient than linear search, especially for large datasets, due to its logarithmic complexity compared to linear  complexity.
2.Requirement: Binary search requires the array to be sorted, whereas linear search does not.



Q)Discuss which algorithm is more suitable for your platform and why.
A)When choosing between linear search and binary search 
-Binary Search is generally more suitable for large datasets where the data is sorted or can be sorted, offering significant  performance  benefits  with its  O(logn) complexity.
-Linear Search is more appropriate for small or unsorted datasets where simplicity and ease of implementation outweigh the need for search performance.


