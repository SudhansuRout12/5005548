Q) Explain different sorting algorithms (Bubble Sort, Insertion Sort, Quick Sort, Merge Sort).
A)Different sorting algorithms are:
1.Bubble Sort: It is a simple comparison-based sorting algorithm. It repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. This process is repeated until the list is sorted.
Best Case:O(n) (when the array is already sorted, with optimized versions).
Average Case: O(n^2)
Worst Case: O(n^2)  (when the array is sorted in reverse order).

2.Insertion Sort: It is a simple comparison-based algorithm. It builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.
Best Case:O(n) (when the array is already sorted).
Average Case: O(n^2)
Worst Case: O(n^2)  (when the array is sorted in reverse order).

3.Quick Sort: It is a divide-and-conquer algorithm. It works by selecting a "pivot" element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.
Best Case:O(nlogn) (when the pivot divides the array into two nearly equal halves).
Average Case: O(nlogn)
Worst Case: O(n^2)   (when the pivot is the smallest or largest element, leading to unbalanced partitions).

4. Merge Sort: It is a divide-and-conquer algorithm that divides the array into halves, sorts each half, and then merges the sorted halves back together.
Best Case:O(nlogn) 
Average Case: O(nlogn)
Worst Case: O(nlogn) 

Q)Compare the performance (time complexity) of Bubble Sort and Quick Sort.
A)Hereâ€™s a comparison of Bubble Sort and Quick Sort based on the provided code:
Bubble Sort-
Best Case:O(n) (when the array is already sorted, with optimized versions).
Average Case: O(n^2)
Worst Case: O(n^2)  (when the array is sorted in reverse order).

Quick Sort-
Best Case:O(nlogn) (when the pivot divides the array into two nearly equal halves).
Average Case: O(nlogn)
Worst Case: O(n^2)   (when the pivot is the smallest or largest element, leading to unbalanced partitions).
Bubble Sort is simpler but inefficient for large arrays due to its quadratic complexity.
Quick Sort is more efficient average-case complexity, making it preferable for larger datasets. Its worst-case is , but with good pivot strategies, it is often avoided in practice.

Q)Discuss why Quick Sort is generally preferred over Bubble Sort.
A)Quick Sort is preferred because it is faster and more scalable, particularly for larger datasets, compared to the slower and less efficient Bubble Sort.
Pratical Usage:-
Quick Sort: Generally performs well in practice with good pivot selection strategies and can be optimized further.
Bubble Sort: Simple to implement but inefficient for sorting large amounts of data.
Scalability:-
Quick Sort: Handles large datasets efficiently due to its logarithmic performance, making it suitable for real-world applications.
Bubble Sort: Becomes impractical for large arrays due to its quadratic time complexity.


