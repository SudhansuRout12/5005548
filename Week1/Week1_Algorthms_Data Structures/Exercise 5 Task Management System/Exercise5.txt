Q)Explain the different types of linked lists (Singly Linked List, Doubly Linked List).
A)A linked list is a linear data structure, in which the elements are not stored at contiguous memory locations. The elements in a linked list are linked using pointers. In simple words, a linked list consists of nodes where each node contains a data field and a reference(link) to the next node in the list. 

Types of linked lists are:-
-Singly Linked List:It is the simplest type of linked list in which every node contains some data and a pointer to the next node of the same data type. 

-Doubly linked list: A doubly linked list is a bi-directional linked list. So, you can traverse it in both directions. Unlike singly linked lists, its nodes contain one extra pointer called the previous pointer. This pointer points to the previous node.
 
-Circular Linked List:A circular Linked list is a unidirectional linked list. So, you can traverse it in only one direction. But this type of linked list has its last node pointing to the head node. So while traversing, you need to be careful and stop traversing when you revisit the head node.

-Circular Doubly Linked List: A circular doubly linked list is a mixture of a doubly linked list and a circular linked list. Like the doubly linked list, it has an extra pointer called the previous pointer, and similar to the circular linked list, its last node points at the head node. This type of linked list is the bi-directional list. So, you can traverse it in both directions.





Q)Analyze the time complexity of each operation.
A)Time Complexity Analysis of Operations are:-
1.Add Task(addTask): Time Complexity- O(n)
2.Search Task (searchTask): Time Complexity- O(n)
3.Traverse List (traverse): Time Complexity- O(n)
4.Delete Task (deleteTask): Time Complexity- O(n)





Q)Discuss the advantages of linked lists over arrays for dynamic data.
A)Advantages of Linked Lists Over Arrays:-
1.Dynamic Size:
-Linked Lists: Can easily grow and shrink in size without the need to specify an initial size or allocate extra space. Adding or removing elements (tasks) is    straightforward and doesn't require resizing.
-Arrays: Have a fixed size once created. Expanding or shrinking an array requires creating a new array and copying elements, which can be inefficient.

2.Efficient Insertions/Deletions:
-Linked Lists: Insertion and deletion operations are efficient, especially when dealing with large datasets. Inserting or deleting a node involves adjusting pointers, which is generally O(1) if you have the node reference.
-Arrays: Inserting or deleting elements requires shifting elements to maintain order, which can be O(n) in the worst case, where n is the number of elements.

3.Memory Utilization:
-Linked Lists: Use memory more flexibly as they only allocate space for the elements present. There is no need to allocate space for unused elements.
-Arrays: May allocate extra space to handle future growth, which can lead to wasted memory if the array is not fully utilized.

4.No Pre-allocation Needed:
-Linked Lists: Do not require specifying the number of elements beforehand. They grow as needed, which makes them suitable for scenarios where the number of elements is unpredictable.
-Arrays: Require an initial size to be set, which can lead to either over-allocation or under-allocation issues.